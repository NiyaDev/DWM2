
// 
// My brain is small, this is to help me understand
// 



[rIF]    = $FF0F;
[rNR50]  = $FF24;
[rNR51]  = $FF25;
[rNR52]  = $FF26;
[rVBK]   = $FF4F; // 
[rRP]    = $FF56; // CGB Mode Only
[rSVBK]  = $FF70; // 

[rRAMG]  = $0100;
[rROMB0] = $2100;
[rROMB1] = $3100;
[rRAMB]  = $4100;


[$C0C0]  = $C0C0;
//	Start = $00
[$C0C1]  = $C0C1;
//	Start = $00
[$C0D8]  = $C0D8;
//	Start = $00
[$C0D9]  = $C0D9;
//	Start = $00
[$C47C]  = $C47C;
//	Start = $20
//	Start = $02
//	Start = $03
//	Start = $04
//	Start = $05
//	Start = $06
//	Start = $07
//	Start = $08
//	Start = $09
//	Start = $18
//	Start = $10
//	Start = $19
//	Start = $14
//	Start = $00
[$C51F]  = $C51F;
//	Start = $00
[$C520]  = $C520;
//	Start = $00
[$C523]  = $C523;
//	Start = $FF
[$C524]  = $C524;
//	Start = $01
//	Start = $00
//	Start = $01
[IsGBC]  = $C525;
[$C52B]  = $C52B;
//	Start = $00
[$C52F]  = $C52F;
//	Start = $00
[$C530]  = $C530;
//	Start = $00
[$C56C]  = $C56C;
[$C586]  = $C586;
//	Start = $00
[$C58A]  = $C58A;
[$C5DB]  = $C5DB;
//	Start = $05
[$C5DC]  = $C5DC;
//	Start = $00
[$C5DD]  = $C5DD;
//	Start = $00
[$C5DE]  = $C5DE;
//	Start = $00
[$C5DF]  = $C5DF;
//	Start = $00
[$C5E0]  = $C5E0;
//	Start = $00
[$C5ED]  = $C5ED;
//	Start = $00
[$C5EE]  = $C5EE;
//	Start = $00
[$C5F0]  = $C5F0;
//	Start = $00
[$C5F1]  = $C5F1;
//	Start = $00
[$C60A]  = $C60A;
//	Start = $FF
[$C60B]  = $C60B;
//	Start = $FF
[$DD09]  = $DD09;
//  Unknown1 = $00;
[$DD12]  = $DD12;
//  Unknown1_3 = $00;
[$DD13]  = $DD13;
//  Unknown1_3 = $00;
[$DD14]  = $DD14;
//  Unknown1_3 = $00;



EntryPoint:
	jp Start

Start :: proc() {

	if A == $11 do [IsGBC] = true;
	else        do [IsGBC] = false;

	di;
	SP = $DFFF;

	SetInterrupts();
	MemInitialization();
	CopyDMATransfer();

	Memset(0, 7168, $8000);

	if [IsGBC] == true {
		[rVBK] = 1;
		Memset(0, 2048, $9800);
		[rVBK] = 0;
	}

	[$C5DB] = 5;
	[$C5DC] = 0;
	[$C5DD] = 0;
	[$C5DE] = 0;

	[rRAMB]  = 0;  //
	[rRAMG]  = 0;  // ROM Bank 1
	[rROMB0] = 1;  //  selected
	[rROMB1] = 0;  //

	[$C524] = 1;
	[$C60A] = 255;
	[$C60B] = 255;

	Unknown1();

	[$C58C] = 0;

	if [IsGBC] == true {
		[rVBK]  = 0;
		[rSVBK] = 0;
		[rRP]   = 0;

		Unknown3();

		[$C524] = 0;
	} else {
		FUN_05E2();

		Wait1750_X(12);

		[$C47C] = 20;
		FUN_ROM31_5040();
		Wait7000();

		[$C47C] = 2;
		FUN_ROM31_5040();
		Wait7000();
		
		[$C47C] = 3;
		FUN_ROM31_5040();
		Wait7000();
		
		[$C47C] = 4;
		FUN_ROM31_5040();
		Wait7000();
		
		[$C47C] = 5;
		FUN_ROM31_5040();
		Wait7000();
		
		[$C47C] = 6;
		FUN_ROM31_5040();
		Wait7000();
		
		[$C47C] = 7;
		FUN_ROM31_5040();
		Wait7000();
		
		[$C47C] = 8;
		FUN_ROM31_5040();
		Wait7000();
		
		[$C47C] = 9;
		FUN_ROM31_5040();
		Wait7000();

		FUN_0705(12, 2048, $446C, 23);
		Wait7000();

		FUN_06A8($0D, $17, $44, $8C);
		Wait7000();

		[$C47C] = 18;
		FUN_ROM31_5040();
		Wait7000();
		
		[$C47C] = 10;
		FUN_ROM31_5040();
		Wait7000();

		[$C47C] = 19;
		FUN_ROM31_5040();
		Wait7000();

		[$C47C] = 14;
		FUN_ROM31_5040();
		Wait7000();

		[$C524] = 1;
		[$C523] = 255;
		[$C51F] = 0;
		[$C520] = 0;
	}

	ei;

	for {
		VRAMClear();
		FUN_0BA7();
		FUN_0B7F();
		FUN_0B9B();
		FUN_0DCA();

		[$C586] = 0;
		[$C52B] = 0;
		[$C52F] = 0;
		[$C530] = 0;
		Unknown2();

		[$C5DF]	= 0;
		[$C5E0]	= 0;
		[$C5EE]	= 0;
		[$C0C0]	= 0;
		[$C0C1]	= 0;
		[$C0D8]	= 0;
		[$C0D9]	= 0;
		[$C5ED]	= 0;
		[$C5F0]	= 0;
		[$C5F1]	= 0;

		[$FFB9] = 0;
		[$FFB9] = 128;

		[$C58D] = 0;
		[$C58E] = 0;

		[$C604] = 0;
		[$C605] = 0;
		[$C606] = 0;
		[$C607] = 0;

		for [$C5DF] == 0 {
			if [$C58A] == 0 do FUN_095B();

			halt;

			if [$C5DF] == 0 do continue;
			if [$C56C] == 0 do break;
			if bit(7, [$C56C]) == 128 do continue;
			else                          do break;
		}

		di;

		SetInterrupts();
		Wait7000();

		[$C47C] = 0;

		FUN_ROM23_5040()
		Wait7000();
	}
}


SECTION "CopyDMATransfer", ROM0[$0080]
// Copies DMA transfer function from 0x008E to high memory
CopyDMATransfer :: proc() {
	C  = $80;
	B  = $0A;
	HL = $008E;
	
	for B != 0 {
		[$FF00+C] = [HL];
		HL += 1;
		C  += 1;
		B  -= 1;
	}
}
ROMDMA: db  $3E, $C0, $E0, $46, $3E, $28, $3D, $20, $FD, $C9;


SECTION "SetInterrupts", ROM0[$078D]
// Sets enabled interrupts, then disables LCD
SetInterrupts :: proc() {
	[rIF]  = 0;
	[rIF] &= $E2;

	DisableLCD();
}
DisableLCD :: proc() {
	if bit(7, [$FF40]) == 0 do return;

	while [rLY] != 0 {}

	reset(7, [$FF40]);
	reset(7, [$C5EC]);
}


SECTION "MemInit", ROM0[$08D0]
// Initializes various parts of both console RAM and Cart RAM
MemInitialization :: proc() {
	if [IsGBC] != 0 {
		[rVBK]   = 0;
		[rSVBK]  = 0;
		[rHDMA1] = 0;
		[rHDMA2] = 0;
		[rHDMA3] = 0;
		[rHDMA4] = 0;
		[rHDMA5] = 0;
		[rBCPS]  = 0;
		[rOCPS]  = 0;
	}

	Memset(0, $1E00, $C000);
	Memset(0, $0074, $FF8A);

	[rRAMG] = 10;
	[rRAMB] =  2;

	Memset(0, $2000, $A000);
	[rRAMB] = 0;
	Memset(0, $2000, $A000);
	[rRAMG] = 0;
}

SECTION "Memset", ROM0[$0949]
// Sets memory at pointer HL to Value a BC times
Memset :: proc(A: value, BC: counter, HL: pointer) {
	for counter != 0 {
		[pointer] = value;
		pointer += 1;
		counter -= 1;
	}
}

SECTION "Unknown1", ROM0[$3290]
// Preps audio then does some audio clearing
Unknown1 :: proc() {
	Unknown1_3(0,0);

	[rNR52] = $80;
	[rNR51] = $00;
	[$DD09] = $00;
	[rNR50] = $77;

	HL = $DC00;
	DE = $0020;
	for i:=6; i != 0; i-=1 {
		[Hl+] = $FF;
		[HL+] = $FF;
		HL   += $0020;
	}

	HL = $DCC0;
	for i:=$48; i != 0; i-=1 {
		[HL+] = $00;
	}

	[$DD15] = 0;
	[$DD19] = 0;
}
Unknown1_1 :: proc() {
	[$DD15] = 0;
	[$DD09] = 0;
}
Unknown1_2 :: proc() {
	[$DD15] = 4;
	[$DD09] = 4;
}
Unknown1_3 :: proc(B: val1, C: val2) {
	[$DD12] = B;
	[$DD13] = C;
	[$DD14] = 0;
}