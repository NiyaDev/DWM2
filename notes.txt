

FUN_0BCC :: proc() {
	ptr1: byte^ = [UNK_C0C0]; //DE
	if ptr1 == 0 do return;

	val1: byte  = [UNK_C0C3]; //B
	ptr2: byte^ = UNK_C0C4;   //HL

	if [UNK_C0C2] != 0 {
		val2 = ptr1^ & $00E0; //C

		for val1 != 0 {
			ptr1   = &ptr2;
			ptr1^ += 1;
			ptr1^  = (ptr1^ & $FF1F) | val2;
			val1  -= 1;
		}
	} else {
		for val1 != 0 {
			ptr1   = &ptr2;
			ptr1^ += 20;
			ptr1^  = ptr1^ & $FFFD;
			val1  -= 1;
		}
	}

	[UNK_C0C0] = 0;
	[UNK_C0C1] = 0;

	if ![IsGBC] do return;

	[rVBK] = 1;

	ptr1 = [UNK_C0D8]; //DE
	if ptr1 == 0 do return;

	val1 = [UNK_C0DB]; //B
	ptr2 = UNK_C0DC;   //HL

	if [UNK_C0DA] == 0 {
		val2 = ptr1^ & $00E0; //C

		for val1 != 0 {
			ptr1   = &ptr2;
			ptr1^ += 1;
			ptr1^  = (ptr1^ & $FF1F) | val2;
			val1  -= 1;
		}
	} else {
		for val1 != 0 {
			ptr1   = &ptr2;
			ptr1^ += 20;
			ptr1^  = ptr1^ & $FFFD;
			val1  -= 1;
		}
	}

	[rVBK] = 0;

	[UNK_C0D8] = 0;
	[UNK_C0D9] = 0;
}













FUN_0A8D :: proc() {
	if [UNK_C58A] == 0 && [UNK_C55D] == 0 {
		[UNK_C560] = 0;
		[UNK_C561] = 0;
	}

	[UNK_C563] = 0;
	[UNK_C562] = ([UNK_C55E] ^ [UNK_C55F]) & [UNK_C55E];

	if [UNK_C55E] == 0 {
		[UNK_C563] = [UNK_C562];
		[UNK_C564] = $14;
	} else if [UNK_C55E] == [UNK_C55F] {
		if [UNK_C564] != 0 {
			[UNK_C564]-= 1;
		} else {
			[UNK_C564] = $06;
			[UNK_C563] = [UNK_C55E];
		}
		[UNK_C564]-= 1;
	}

	[UNK_C567] = 0;
	[UNK_C566] = ([UNK_C560] ^ [UNK_C561]) & [UNK_C560];

	if [UNK_C560] == 0 {
		[UNK_C567] = [UNK_C566];
		[UNK_C568] = $14;
	} else if [UNK_C560] == [UNK_C561] {
		if [UNK_C568] != 0 {
			[UNK_C568]-=1;
		} else {
			[UNK_C568] = $06;
			[UNK_C567] = [UNK_C560];
			[UNK_C568]-= 1;
		}
	}
}








